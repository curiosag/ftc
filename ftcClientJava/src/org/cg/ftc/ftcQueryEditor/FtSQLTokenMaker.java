/* The following code was generated by JFlex 1.4.3 on 1/11/16 3:23 PM */

/*
 * 11/15/2015
 *
 * FtSQLTokenMaker.java - Scanner for Google FusionTablesSQL.
 * 
 */
package org.cg.ftc.ftcQueryEditor;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * This class generates tokens representing a text stream as SQL.<p>
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated <code>FtSQLTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.5
 *
 */

public class FtSQLTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 6;
  public static final int CHAR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\1\25\0\1\4\1\0\1\51\4\0\1\52\2\15"+
    "\1\13\1\11\1\0\1\12\1\17\1\14\12\3\1\16\1\0\1\10"+
    "\1\7\1\6\2\0\1\21\1\31\1\33\1\26\1\20\1\40\1\41"+
    "\1\42\1\37\1\44\1\45\1\22\1\35\1\25\1\27\1\36\1\47"+
    "\1\24\1\30\1\23\1\34\1\43\1\46\1\50\1\32\1\2\1\53"+
    "\1\0\1\54\1\0\1\5\1\0\1\21\1\31\1\33\1\26\1\20"+
    "\1\40\1\41\1\42\1\37\1\44\1\45\1\22\1\35\1\25\1\27"+
    "\1\36\1\47\1\24\1\30\1\23\1\34\1\43\1\46\1\50\1\32"+
    "\1\2\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\1\1\3\1\4\5\5\1\6"+
    "\1\1\1\7\24\1\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\13\1\16\1\17\1\13\1\20\1\13\1\0"+
    "\1\21\1\22\4\1\1\23\5\1\1\23\5\1\2\23"+
    "\14\1\1\23\11\1\1\24\1\13\1\25\1\7\1\0"+
    "\21\1\1\26\32\1\1\23\17\1\1\23\24\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\264\0\341\0\u010e"+
    "\0\u013b\0\u0168\0\264\0\u0195\0\u01c2\0\u01ef\0\264\0\u021c"+
    "\0\u0249\0\u0276\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384"+
    "\0\u03b1\0\u03de\0\u040b\0\u0438\0\u0465\0\u0492\0\u04bf\0\u04ec"+
    "\0\u0519\0\u0546\0\u0573\0\u05a0\0\u05cd\0\264\0\264\0\u05fa"+
    "\0\u0627\0\264\0\u0654\0\u0681\0\264\0\u06ae\0\u06db\0\264"+
    "\0\u0708\0\u0735\0\u0762\0\264\0\u078f\0\u07bc\0\u07e9\0\u0816"+
    "\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924\0\341\0\u0951"+
    "\0\u097e\0\u09ab\0\u09d8\0\u0a05\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9"+
    "\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21"+
    "\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f\0\u0d5c\0\u0d89"+
    "\0\u0db6\0\u0de3\0\u0e10\0\u0e3d\0\264\0\264\0\264\0\u0e6a"+
    "\0\u0e6a\0\u0e97\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5"+
    "\0\u0fd2\0\u0fff\0\u102c\0\u1059\0\u1086\0\u10b3\0\u10e0\0\u110d"+
    "\0\u113a\0\u1167\0\341\0\u1194\0\u11c1\0\u11ee\0\u121b\0\u1248"+
    "\0\u1275\0\u12a2\0\u12cf\0\u12fc\0\u1329\0\u1356\0\u1383\0\u13b0"+
    "\0\u13dd\0\u140a\0\u1437\0\u1464\0\u1491\0\u14be\0\u14eb\0\u1518"+
    "\0\u1545\0\u1572\0\u159f\0\u15cc\0\u15f9\0\u1626\0\u1653\0\u1680"+
    "\0\u16ad\0\u16da\0\u1707\0\u1734\0\u1761\0\u178e\0\u17bb\0\u17e8"+
    "\0\u1815\0\u1842\0\u186f\0\u189c\0\u18c9\0\u0e97\0\u18f6\0\u1923"+
    "\0\u1950\0\u197d\0\u19aa\0\u19d7\0\u1a04\0\u1a31\0\u1a5e\0\u1a8b"+
    "\0\u1ab8\0\u1ae5\0\u1b12\0\u1b3f\0\u1b6c\0\u1b99\0\u1bc6\0\u1bf3"+
    "\0\u1c20\0\u1c4d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\5\1\12\1\13"+
    "\1\14\1\13\1\15\1\13\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\7\1\34\1\35\1\36\1\7\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\7\1\45\2\7"+
    "\1\46\1\47\1\50\1\5\1\51\1\52\47\51\1\53"+
    "\3\51\1\54\1\55\50\54\1\56\2\54\1\57\1\60"+
    "\11\57\1\61\41\57\57\0\2\7\1\0\1\7\12\0"+
    "\31\7\7\0\1\10\13\0\1\21\1\62\40\0\1\11"+
    "\57\0\1\13\53\0\2\13\57\0\1\63\55\0\1\64"+
    "\43\0\1\7\15\0\31\7\7\0\1\21\14\0\1\62"+
    "\36\0\2\7\1\0\1\7\12\0\5\7\1\65\21\7"+
    "\1\66\1\7\6\0\2\7\1\0\1\7\12\0\2\7"+
    "\1\67\2\7\1\70\2\7\1\71\12\7\1\72\5\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\73\1\74\15\7"+
    "\1\75\11\7\6\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\76\5\7\1\77\21\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\100\30\7\6\0\2\7\1\0\1\7\12\0"+
    "\7\7\1\101\21\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\102\3\7\1\103\2\7\1\104\21\7\6\0\2\7"+
    "\1\0\1\7\12\0\4\7\1\105\1\77\6\7\1\67"+
    "\3\7\1\106\10\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\107\2\7\1\110\10\7\1\111\5\7\1\112\6\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\113\11\7\1\77"+
    "\16\7\6\0\2\7\1\0\1\7\12\0\1\7\1\114"+
    "\2\7\1\115\2\7\1\116\7\7\1\117\11\7\6\0"+
    "\2\7\1\0\1\7\12\0\16\7\1\120\12\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\121\15\7\1\122"+
    "\11\7\6\0\2\7\1\0\1\7\12\0\5\7\1\123"+
    "\13\7\1\124\7\7\6\0\2\7\1\0\1\7\12\0"+
    "\4\7\1\125\24\7\6\0\2\7\1\0\1\7\12\0"+
    "\4\7\1\126\24\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\127\27\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\130\15\7\1\131\11\7\6\0\2\7\1\0"+
    "\1\7\12\0\7\7\1\132\21\7\6\0\2\7\1\0"+
    "\1\7\12\0\17\7\1\133\2\7\1\134\6\7\4\0"+
    "\54\50\1\135\1\51\1\0\47\51\1\0\3\51\51\0"+
    "\1\136\3\0\1\54\1\0\50\54\1\0\2\54\52\0"+
    "\1\136\2\0\1\57\1\0\11\57\1\0\41\57\14\0"+
    "\1\137\43\0\1\140\5\0\2\141\42\0\1\63\1\0"+
    "\53\63\2\0\2\7\1\0\1\7\12\0\6\7\1\142"+
    "\22\7\6\0\2\7\1\0\1\7\12\0\14\7\1\143"+
    "\14\7\6\0\2\7\1\0\1\7\12\0\3\7\1\144"+
    "\25\7\6\0\2\7\1\0\1\7\12\0\6\7\1\77"+
    "\22\7\6\0\2\7\1\0\1\7\12\0\13\7\1\77"+
    "\15\7\6\0\2\7\1\0\1\7\12\0\1\145\30\7"+
    "\6\0\2\7\1\0\1\7\12\0\20\7\1\101\10\7"+
    "\6\0\2\7\1\0\1\7\12\0\3\7\1\146\25\7"+
    "\6\0\2\7\1\0\1\7\12\0\15\7\1\147\7\7"+
    "\1\150\3\7\6\0\2\7\1\0\1\7\12\0\11\7"+
    "\1\151\17\7\6\0\2\7\1\0\1\7\12\0\5\7"+
    "\1\152\5\7\1\153\15\7\6\0\2\7\1\0\1\7"+
    "\12\0\3\7\1\77\25\7\6\0\2\7\1\0\1\7"+
    "\12\0\2\7\1\154\5\7\1\155\20\7\6\0\2\7"+
    "\1\0\1\7\12\0\7\7\1\156\21\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\142\30\7\6\0\2\7\1\0"+
    "\1\7\12\0\6\7\1\144\22\7\6\0\2\7\1\0"+
    "\1\7\12\0\20\7\1\157\10\7\6\0\2\7\1\0"+
    "\1\7\12\0\2\7\1\160\1\77\25\7\6\0\2\7"+
    "\1\0\1\161\12\0\1\7\1\162\27\7\6\0\2\7"+
    "\1\0\1\7\12\0\15\7\1\163\13\7\6\0\2\7"+
    "\1\0\1\7\12\0\7\7\1\164\21\7\6\0\2\7"+
    "\1\0\1\7\12\0\3\7\1\165\25\7\6\0\2\7"+
    "\1\0\1\7\12\0\10\7\1\150\20\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\166\30\7\6\0\2\7\1\0"+
    "\1\7\12\0\2\7\1\167\2\7\1\170\23\7\6\0"+
    "\2\7\1\0\1\7\12\0\4\7\1\171\24\7\6\0"+
    "\2\7\1\0\1\7\12\0\6\7\1\166\22\7\6\0"+
    "\2\7\1\0\1\7\12\0\3\7\1\172\24\7\1\173"+
    "\6\0\2\7\1\0\1\7\12\0\5\7\1\173\23\7"+
    "\6\0\2\7\1\0\1\7\12\0\3\7\1\174\4\7"+
    "\1\175\20\7\6\0\2\7\1\0\1\7\12\0\5\7"+
    "\1\176\23\7\6\0\2\7\1\0\1\7\12\0\7\7"+
    "\1\177\21\7\6\0\2\7\1\0\1\7\12\0\7\7"+
    "\1\200\21\7\6\0\2\7\1\0\1\7\12\0\23\7"+
    "\1\201\5\7\6\0\2\7\1\0\1\7\12\0\2\7"+
    "\1\202\26\7\6\0\2\7\1\0\1\7\12\0\1\164"+
    "\30\7\6\0\2\7\1\0\1\7\12\0\17\7\1\203"+
    "\11\7\6\0\2\7\1\0\1\7\12\0\3\7\1\204"+
    "\25\7\6\0\2\7\1\0\1\7\12\0\1\205\30\7"+
    "\7\0\1\140\53\0\2\7\1\0\1\7\12\0\10\7"+
    "\1\77\20\7\6\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\206\27\7\6\0\2\7\1\0\1\7\12\0\1\207"+
    "\30\7\6\0\2\7\1\0\1\7\12\0\4\7\1\210"+
    "\24\7\6\0\2\7\1\0\1\7\12\0\2\7\1\211"+
    "\26\7\6\0\2\7\1\0\1\7\12\0\17\7\1\101"+
    "\11\7\6\0\2\7\1\0\1\7\12\0\1\77\30\7"+
    "\6\0\2\7\1\0\1\7\12\0\2\7\1\212\26\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\7\1\213\27\7"+
    "\6\0\2\7\1\0\1\7\12\0\3\7\1\214\25\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\215\30\7\6\0"+
    "\2\7\1\0\1\7\12\0\13\7\1\216\15\7\6\0"+
    "\2\7\1\0\1\7\12\0\16\7\1\77\12\7\6\0"+
    "\2\7\1\0\1\7\12\0\10\7\1\217\20\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\220\30\7\6\0\2\7"+
    "\1\0\1\7\12\0\6\7\1\221\10\7\1\222\11\7"+
    "\6\0\2\7\1\0\1\7\12\0\4\7\1\223\24\7"+
    "\6\0\2\7\1\0\1\7\12\0\26\7\1\77\2\7"+
    "\6\0\2\7\1\0\1\7\12\0\26\7\1\224\2\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\7\1\215\27\7"+
    "\6\0\2\7\1\0\1\7\12\0\14\7\1\225\14\7"+
    "\6\0\2\7\1\0\1\7\12\0\3\7\1\226\25\7"+
    "\6\0\2\7\1\0\1\7\12\0\13\7\1\227\15\7"+
    "\6\0\2\7\1\0\1\7\12\0\13\7\1\230\15\7"+
    "\6\0\2\7\1\0\1\7\12\0\17\7\1\231\11\7"+
    "\6\0\2\7\1\0\1\7\12\0\7\7\1\77\21\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\232\30\7\6\0"+
    "\2\7\1\0\1\7\12\0\7\7\1\233\21\7\6\0"+
    "\2\7\1\0\1\7\12\0\15\7\1\77\13\7\6\0"+
    "\2\7\1\0\1\7\12\0\14\7\1\156\14\7\6\0"+
    "\2\7\1\0\1\7\12\0\17\7\1\211\11\7\6\0"+
    "\2\7\1\0\1\7\12\0\14\7\1\104\14\7\6\0"+
    "\2\7\1\0\1\7\12\0\5\7\1\77\23\7\6\0"+
    "\2\7\1\0\1\7\12\0\22\7\1\77\6\7\6\0"+
    "\2\7\1\0\1\7\12\0\4\7\1\150\24\7\6\0"+
    "\2\7\1\0\1\7\12\0\2\7\1\77\26\7\6\0"+
    "\2\7\1\0\1\7\12\0\4\7\1\77\24\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\234\27\7\6\0"+
    "\2\7\1\0\1\7\12\0\5\7\1\235\23\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\236\30\7\6\0\2\7"+
    "\1\0\1\7\12\0\15\7\1\150\13\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\237\27\7\6\0\2\7"+
    "\1\0\1\7\12\0\3\7\1\150\25\7\6\0\2\7"+
    "\1\0\1\7\12\0\4\7\1\240\24\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\101\30\7\6\0\2\7\1\0"+
    "\1\7\12\0\13\7\1\101\15\7\6\0\2\7\1\0"+
    "\1\7\12\0\17\7\1\241\11\7\6\0\2\7\1\0"+
    "\1\7\12\0\5\7\1\242\23\7\6\0\2\7\1\0"+
    "\1\7\12\0\3\7\1\142\25\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\243\30\7\6\0\2\7\1\0\1\7"+
    "\12\0\15\7\1\203\13\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\244\27\7\6\0\2\7\1\0\1\7"+
    "\12\0\2\7\1\150\26\7\6\0\2\7\1\0\1\7"+
    "\12\0\22\7\1\104\6\7\6\0\2\7\1\0\1\7"+
    "\12\0\15\7\1\245\13\7\6\0\2\7\1\0\1\7"+
    "\12\0\4\7\1\101\24\7\6\0\2\7\1\0\1\7"+
    "\12\0\4\7\1\201\24\7\6\0\2\7\1\0\1\7"+
    "\12\0\21\7\1\246\7\7\6\0\2\7\1\0\1\7"+
    "\12\0\21\7\1\77\7\7\6\0\2\7\1\0\1\7"+
    "\12\0\5\7\1\247\23\7\6\0\2\7\1\0\1\7"+
    "\12\0\17\7\1\250\11\7\6\0\2\7\1\0\1\7"+
    "\12\0\10\7\1\251\20\7\6\0\2\7\1\0\1\7"+
    "\12\0\3\7\1\252\25\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\203\30\7\6\0\2\7\1\0\1\7\12\0"+
    "\17\7\1\253\11\7\6\0\2\7\1\0\1\7\12\0"+
    "\14\7\1\111\14\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\163\30\7\6\0\2\7\1\0\1\7\12\0\21\7"+
    "\1\227\7\7\6\0\2\7\1\0\1\7\12\0\11\7"+
    "\1\150\17\7\6\0\2\7\1\0\1\7\12\0\3\7"+
    "\1\254\25\7\6\0\2\7\1\0\1\7\12\0\1\255"+
    "\30\7\6\0\2\7\1\0\1\7\12\0\5\7\1\236"+
    "\23\7\6\0\2\7\1\0\1\7\12\0\1\7\1\256"+
    "\27\7\6\0\2\7\1\0\1\7\12\0\4\7\1\257"+
    "\24\7\6\0\2\7\1\0\1\7\12\0\5\7\1\260"+
    "\23\7\6\0\2\7\1\0\1\7\12\0\10\7\1\261"+
    "\20\7\6\0\2\7\1\0\1\7\12\0\13\7\1\150"+
    "\15\7\6\0\2\7\1\0\1\7\12\0\1\262\30\7"+
    "\6\0\2\7\1\0\1\7\12\0\13\7\1\223\15\7"+
    "\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7290];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\11\4\1\1\11\3\1\1\11\26\1\2\11"+
    "\2\1\1\11\2\1\1\11\2\1\1\11\1\1\1\0"+
    "\1\1\1\11\50\1\3\11\1\1\1\0\121\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public FtSQLTokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Overridden to return <code>true</code> so paren matching occurs for
	 * SQL.
	 *
	 * @return <code>true</code> always.
	 */
	@Override
	public boolean getCurlyBracesDenoteCodeBlocks(int languageIndex) {
		return true;
	}


	/**
	 * {@inheritDoc}
	 */
	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "--", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.LITERAL_STRING_DOUBLE_QUOTE:
				state = STRING;
				start = text.offset;
				break;
			case Token.LITERAL_CHAR:
				state = CHAR;
				start = text.offset;
				break;
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FtSQLTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public FtSQLTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }
  
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }

  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 20: 
          { addToken(Token.PREPROCESSOR);
          }
        case 23: break;
        case 2: 
          { addNullToken(); return firstToken;
          }
        case 24: break;
        case 21: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 25: break;
        case 18: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 26: break;
        case 4: 
          { addToken(Token.WHITESPACE);
          }
        case 27: break;
        case 14: 
          { addToken(start,zzStartRead-1, Token.LITERAL_CHAR); return firstToken;
          }
        case 28: break;
        case 9: 
          { start = zzMarkedPos-1; yybegin(CHAR);
          }
        case 29: break;
        case 7: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 30: break;
        case 19: 
          { addToken(Token.RESERVED_WORD);
          }
        case 31: break;
        case 6: 
          { addToken(Token.SEPARATOR);
          }
        case 32: break;
        case 15: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead, Token.LITERAL_CHAR);
          }
        case 33: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 34: break;
        case 22: 
          { addToken(Token.FUNCTION);
          }
        case 35: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.LITERAL_STRING_DOUBLE_QUOTE); return firstToken;
          }
        case 36: break;
        case 17: 
          { addToken(Token.COMMENT_EOL);
          }
        case 37: break;
        case 8: 
          { start = zzMarkedPos-1; yybegin(STRING);
          }
        case 38: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 39: break;
        case 5: 
          { addToken(Token.OPERATOR);
          }
        case 40: break;
        case 13: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead, Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 41: break;
        case 10: 
          { addToken(Token.ERROR_IDENTIFIER); addNullToken(); return firstToken;
          }
        case 42: break;
        case 11: 
          { 
          }
        case 43: break;
        case 16: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 44: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case STRING: {
              addToken(start,zzStartRead-1, Token.LITERAL_STRING_DOUBLE_QUOTE); return firstToken;
            }
            case 179: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 180: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 181: break;
            case CHAR: {
              addToken(start,zzStartRead-1, Token.LITERAL_CHAR); return firstToken;
            }
            case 182: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
